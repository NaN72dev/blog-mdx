# Multi-stage build for ultra-minimal production image using distroless
FROM --platform=linux/amd64 node:20-alpine AS base

# Install pnpm globally and setup
RUN npm install -g pnpm && \
    apk add --no-cache libc6-compat && \
    rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files for dependency installation
COPY package.json pnpm-lock.yaml ./

# Dependencies stage - install all dependencies including dev dependencies
FROM base AS deps
# Use BuildKit cache mount for faster pnpm installs
RUN --mount=type=cache,id=pnpm,target=/root/.local/share/pnpm/store \
    pnpm install --frozen-lockfile

# Builder stage - build the application
FROM base AS builder
# Copy node_modules from deps stage
COPY --from=deps /app/node_modules ./node_modules
# Copy source code
COPY . .

# Build the application with standalone output
RUN pnpm build

# Production stage - use distroless for ultra-minimal image
FROM gcr.io/distroless/nodejs20-debian12 AS runner

LABEL authors="NaN"

WORKDIR /app

# Copy the standalone output from builder
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public

# Set environment variables
ENV PORT=3001 \
    NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    HOSTNAME="0.0.0.0"

# Expose port
EXPOSE 3001

# Start the application using the standalone server
CMD ["server.js"] 